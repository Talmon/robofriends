{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","actions.js","constants.js","reportWebVitals.js","reducers.js","serviceWorkerRegistration.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","robots","map","user","i","components_Card","key","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","marginTop","children","App","onSearchChange","event","console","log","target","value","_this","setState","this","onRequestRobots","_this$props","isPending","filteredRobots","filter","robot","toLocaleLowerCase","includes","components_SearchBox","components_Scroll","components_CardList","Component","connect","state","searchRobots","requestRobots","error","dispatch","payload","fetch","then","response","json","data","catch","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","bind","getCLS","getFID","getFCP","getLCP","getTTFB","intialState","intialStateRobots","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","rootReducer","combineReducers","arguments","length","undefined","action","Object","assign","logger","createLogger","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","URL","process","href","origin","addEventListener","headers","Service-Worker","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.ebbb9d90.chunk.js","sourcesContent":["import React from 'react';\n\n\n\nconst Card = ({name, email, id}) => {\n    return (\n        <div className='bg-light-purple dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img alt='robots' src={`https://robohash.org/${id}?200x200`} />\n            <div>\n                <h2> {name} </h2>\n                <p> {email} </p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) => {\n    return (\n        <div>\n            {\n                robots.map((user, i)  => {\n                    return (\n                        <Card\n                            key={i}\n                            id={robots[i].id}\n                            name={robots[i].name}\n                            email={robots[i].email}\n                        />\n                    );\n                })\n            }\n        </div>\n    );\n}\n\nexport default CardList;","import React from 'react';\n\n\n// This is the searchbox\n\nconst SearchBox = ({ searchField, searchChange}) => {\n    return (\n        <div>\n        <input \n            className='pa3 ba b--purple bg-lightest-blue'\n            type='search'\n            placeholder='search robots'\n            onChange={searchChange}\n        />\n        </div>\n        \n    );\n}\n\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style={ {overflowY: 'scroll', border: '1px solid black', height: '800px', marginTop: '20px'} }>\n            {props.children}\n        </div>\n    );\n\n};\n\nexport default Scroll;","import React, {Component} from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList';\n// import {robots} from './robots';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport './App.css'\nimport { requestRobots, setSearchField } from '../actions';\n\nconst mapStateToProps = state => {\n    return {\n        searchField: state.searchRobots.searchField,\n        robots: state.requestRobots.robots,\n        isPending: state.requestRobots.isPending,\n        error: state.requestRobots.error\n        // searchField: \"\"\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n        onRequestRobots: () => dispatch(requestRobots())\n    }\n}\n\nclass App extends Component {\n    // constructor() {\n    //     super()\n    //     this.state = {\n    //         robots: [],\n    //     }\n    // }\n\n    componentDidMount() {\n        // console.log(this.props)\n        // fetch('https://jsonplaceholder.typicode.com/users')\n        // .then(response => response.json())\n        // .then(users => this.setState({robots: users}))\n        this.props.onRequestRobots()\n    }\n\n    onSearchChange = (event) => {\n        console.log(event.target.value)\n        this.setState({ searchField: event.target.value })\n    }\n\n    render(){\n        // const { robots } = this.state;\n        const { searchField, onSearchChange, robots, isPending } = this.props;\n        const filteredRobots = robots.filter( robot => {\n            return robot.name.toLocaleLowerCase().includes(searchField.toLocaleLowerCase())\n        })\n        return isPending ?\n        <h1>Loading</h1> :\n         (\n            <div className='tc'>\n                <h1 className='f1'>RoboFriends</h1>\n                <SearchBox searchChange={onSearchChange}/>\n                <Scroll>\n                    <CardList robots={filteredRobots}/>\n                </Scroll>\n            </div>\n        );\n    }\n   \n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from \"./constants\";\n\n\nexport const setSearchField = (text) => ({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n})\n\n\n\n\n\n\n\n\nexport const requestRobots = () =>  (dispatch) => {\n    dispatch({type: REQUEST_ROBOTS_PENDING});\n    fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\n        .catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}))\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\n\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\n\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { \n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n} from \"./constants\";\n\nconst intialState = {\n    searchField: ''\n}\n\nexport const searchRobots = (state=intialState, action={}) => {\n    switch(action.type) {\n        case CHANGE_SEARCH_FIELD:\n            return Object.assign({}, state,  { searchField: action.payload });\n        default:\n            return state;\n    }\n}\n\nconst intialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: ''\n}\n\nexport const requestRobots = (state=intialStateRobots, action={}) => {\n    switch(action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return Object.assign({}, state, {isPending: true})\n        case REQUEST_ROBOTS_SUCCESS:\n            return Object.assign({}, state, {robots: action.payload, isPending: false})\n        case REQUEST_ROBOTS_FAILED:\n            return Object.assign({}, state, {error: action.payload, isPending: false})\n        default:\n            return state\n    }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\nimport { searchRobots,requestRobots } from './reducers';\nimport { createLogger } from 'redux-logger'\nimport thunkMiddleware  from 'redux-thunk';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\n\n\n\nconst rootReducer = combineReducers({searchRobots, requestRobots})\nconst logger = createLogger();\nconst store = createStore(rootReducer, applyMiddleware( thunkMiddleware,logger))\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <App  />\n  </Provider>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n// Register service worker\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\nreportWebVitals();\n"],"sourceRoot":""}